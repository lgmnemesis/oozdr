rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    match /{document=**} {
    	// Reject all by default
      allow read, write: if false;
    }
    
    match /profiles/{userId} {
    	allow read: if isOwner();
    	allow create: if isSignedIn() && isValid();
    	allow update: if isOwner() && isValid();
    	allow delete: if isOwner();
    }
    
    match /connections/{userId} {
    	allow read: if isOwner();
    	allow create: if isSignedIn() && isValidForConnectionCreateDoc();
    	allow update: if isOwner() && isValidForConnectionUpdateDoc();
    	allow delete: if isOwner();
    }
    
    match /matches/{matchId} {
    	allow read: if canReadChat();
    	allow create: if false;
    	allow update: if canUpdateChat();
    	allow delete: if false;
    }
  }
  
  function isValidForConnectionDoc() {
  	return isValid() 
    	&& incomingData().id == request.auth.uid + '_' + incomingData().basicInfo.mobile;
  }
  
  function isValidForConnectionCreateDoc() {
  	return isValidForConnectionDoc()
    	&& incomingData().createdAt == request.time;
  }
  
  function isValidForConnectionUpdateDoc() {
  	return isValidForConnectionDoc()
      && ((request.writeFields.size() == 1)
      && (('isNewMatch' in request.writeFields) || ('basicInfo' in request.writeFields)));
  }
  
  function isValid() {
  	return incomingData().user_id == request.auth.uid;
  }
  
  function isValidChat() {
  	return incomingData().id == existingData().id 
  		&& incomingData().participates == existingData().participates
      && incomingData().firstParty.user_id == existingData().firstParty.user_id
      && incomingData().firstParty.user_mobile == existingData().firstParty.user_mobile
      && incomingData().secondParty.user_id == existingData().secondParty.user_id
      && incomingData().secondParty.user_mobile == existingData().secondParty.user_mobile
      && incomingData().messages.hasAll(existingData().messages)
      && (incomingData().messages.size() == existingData().messages.size() + 1
      || (incomingData().firstParty.hasNewMessages != existingData().firstParty.hasNewMessages
      || incomingData().secondParty.hasNewMessages != existingData().secondParty.hasNewMessages))
      && request.resource.size() == resource.size();
  }
  
  function isOwner() {
  	return isSignedIn() && request.auth.uid == existingData().user_id;
  }
  
  function isSignedIn() {
  	return request.auth != null;
	}
  
  function isParticipate() {
  	return request.auth.uid in existingData().participates;
  }
  
  function canReadChat() {
		return isParticipate();
  }
  
  function canUpdateChat() {
		return canReadChat() && isValidChat();   
  }

  
  function existingData() {
  	return resource.data;
  }
  
  function incomingData() {
  	return request.resource.data;
  }
}